/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as DashboardRouteImport } from './routes/dashboard';
import { Route as IndexRouteImport } from './routes/index';
import { Route as DashboardAppsRouteImport } from './routes/dashboard/apps';
import { Route as AuthHandlerRouteImport } from './routes/auth/handler';
import { Route as DashboardAppsIndexRouteImport } from './routes/dashboard/apps/index';
import { Route as DashboardAppsIdRouteImport } from './routes/dashboard/apps/$id';

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardAppsRoute = DashboardAppsRouteImport.update({
  id: '/apps',
  path: '/apps',
  getParentRoute: () => DashboardRoute,
} as any);
const AuthHandlerRoute = AuthHandlerRouteImport.update({
  id: '/auth/handler',
  path: '/auth/handler',
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardAppsIndexRoute = DashboardAppsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardAppsRoute,
} as any);
const DashboardAppsIdRoute = DashboardAppsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DashboardAppsRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/dashboard': typeof DashboardRouteWithChildren;
  '/auth/handler': typeof AuthHandlerRoute;
  '/dashboard/apps': typeof DashboardAppsRouteWithChildren;
  '/dashboard/apps/$id': typeof DashboardAppsIdRoute;
  '/dashboard/apps/': typeof DashboardAppsIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/dashboard': typeof DashboardRouteWithChildren;
  '/auth/handler': typeof AuthHandlerRoute;
  '/dashboard/apps/$id': typeof DashboardAppsIdRoute;
  '/dashboard/apps': typeof DashboardAppsIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/dashboard': typeof DashboardRouteWithChildren;
  '/auth/handler': typeof AuthHandlerRoute;
  '/dashboard/apps': typeof DashboardAppsRouteWithChildren;
  '/dashboard/apps/$id': typeof DashboardAppsIdRoute;
  '/dashboard/apps/': typeof DashboardAppsIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/dashboard'
    | '/auth/handler'
    | '/dashboard/apps'
    | '/dashboard/apps/$id'
    | '/dashboard/apps/';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/dashboard'
    | '/auth/handler'
    | '/dashboard/apps/$id'
    | '/dashboard/apps';
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/auth/handler'
    | '/dashboard/apps'
    | '/dashboard/apps/$id'
    | '/dashboard/apps/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DashboardRoute: typeof DashboardRouteWithChildren;
  AuthHandlerRoute: typeof AuthHandlerRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof DashboardRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/dashboard/apps': {
      id: '/dashboard/apps';
      path: '/apps';
      fullPath: '/dashboard/apps';
      preLoaderRoute: typeof DashboardAppsRouteImport;
      parentRoute: typeof DashboardRoute;
    };
    '/auth/handler': {
      id: '/auth/handler';
      path: '/auth/handler';
      fullPath: '/auth/handler';
      preLoaderRoute: typeof AuthHandlerRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/dashboard/apps/': {
      id: '/dashboard/apps/';
      path: '/';
      fullPath: '/dashboard/apps/';
      preLoaderRoute: typeof DashboardAppsIndexRouteImport;
      parentRoute: typeof DashboardAppsRoute;
    };
    '/dashboard/apps/$id': {
      id: '/dashboard/apps/$id';
      path: '/$id';
      fullPath: '/dashboard/apps/$id';
      preLoaderRoute: typeof DashboardAppsIdRouteImport;
      parentRoute: typeof DashboardAppsRoute;
    };
  }
}

interface DashboardAppsRouteChildren {
  DashboardAppsIdRoute: typeof DashboardAppsIdRoute;
  DashboardAppsIndexRoute: typeof DashboardAppsIndexRoute;
}

const DashboardAppsRouteChildren: DashboardAppsRouteChildren = {
  DashboardAppsIdRoute: DashboardAppsIdRoute,
  DashboardAppsIndexRoute: DashboardAppsIndexRoute,
};

const DashboardAppsRouteWithChildren = DashboardAppsRoute._addFileChildren(
  DashboardAppsRouteChildren,
);

interface DashboardRouteChildren {
  DashboardAppsRoute: typeof DashboardAppsRouteWithChildren;
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAppsRoute: DashboardAppsRouteWithChildren,
};

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AuthHandlerRoute: AuthHandlerRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
