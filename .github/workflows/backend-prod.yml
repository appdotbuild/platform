name: Build and deploy backend to production

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read  

jobs:
  setup:
    name: Setup
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v8

  e2e_tests:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.54.0-noble
    timeout-minutes: 60
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ASSUMED_ROLE: ${{ secrets.AWS_ASSUMED_ROLE }}
      BUCKET_NAME: ${{ secrets.E2E_REPORT_BUCKET }}
    steps:
      - uses: actions/checkout@v4

      - name: Install unzip
        run: apt-get update && apt-get install -y unzip

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Install AWS CLI
        run: |
          apt-get update
          apt-get install -y curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ASSUMED_ROLE }}
          role-session-name: 'github-actions'
          aws-region: ${{ env.AWS_REGION }}

      - name: Run tests
        run: bun run e2e:test:ci
        env:
          BASE_URL: ${{ vars.STAGING_BASE_URL }}
          E2E_EMAIL: ${{ secrets.E2E_EMAIL }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          TOTP_SECRET: ${{ secrets.TOTP_SECRET }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
          NEON_AUTH_API_KEY: ${{ secrets.NEON_AUTH_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}

      - name: Upload Playwright Report to S3
        if: always()
        env:
          BUCKET_NAME: ${{ secrets.E2E_REPORT_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          REPORT_DIR="./apps/web/playwright-report"
          REPORT_DIR2="./apps/web/playwright-report2"

          if [ -d "$REPORT_DIR" ]; then
            REF="${{ needs.setup.outputs.branch }}"
            RUN_ID=${{ github.run_id }}

            S3_PATH="s3://${BUCKET_NAME}/${REF}/${RUN_ID}/"
            aws s3 cp --recursive "$REPORT_DIR" "$S3_PATH"

            if [ -d "$REPORT_DIR2" ]; then
              aws s3 cp --recursive "$REPORT_DIR2" "$S3_PATH"
            fi

            REPORT_URL="https://${BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com/${REF}/${RUN_ID}/index.html"
            echo "✅ Playwright report uploaded to: $REPORT_URL"
          else
            echo "⚠️ Report directory not found: $REPORT_DIR"
          fi

  deploy:
    needs: [setup, e2e_tests]
    if: needs.e2e_tests.result == 'success'
    concurrency:
      group: '${{ github.ref_name }}'
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install and configure the Koyeb CLI
        uses: koyeb-community/koyeb-actions@v2
        with:
          api_token: '${{ secrets.KOYEB_CLI_PROD }}'

      - name: Build and deploy to Koyeb
        run: |
          koyeb deploy . platform-${{ github.ref_name }}/main \
            --instance-type large \
            --region fra \
            --archive-builder docker \
            --archive-docker-dockerfile apps/backend/Dockerfile.backend \
            --privileged \
            --type web \
            --port 4444:http \
            --route /:4444 \
            --env AWS_ACCESS_KEY_ID=@AWS_ACCESS_KEY_ID \
            --env AWS_SECRET_ACCESS_KEY=@AWS_SECRET_ACCESS_KEY \
            --env AWS_REGION=@AWS_REGION \
            --env AWS_ECR_URL=@AWS_ECR_URL \
            --env AWS_ECR_NAMESPACE=@AWS_ECR_NAMESPACE \
            --env NEON_API_KEY=@NEON_API_KEY \
            --env AGENT_API_SECRET_AUTH=@AGENT_API_SECRET_AUTH \
            --env STACK_PROJECT_ID=@STACK_PROJECT_ID \
            --env STACK_PUBLISHABLE_CLIENT_KEY=@STACK_PUBLISHABLE_CLIENT_KEY \
            --env STACK_SECRET_SERVER_KEY=@STACK_SECRET_SERVER_KEY \
            --env GITHUB_APP_ID=@GITHUB_APP_ID \
            --env GITHUB_APP_PRIVATE_KEY=@GITHUB_APP_PRIVATE_KEY \
            --env GITHUB_APP_BOT_EMAIL=@GITHUB_APP_BOT_EMAIL \
            --env DATABASE_URL=@DATABASE_URL \
            --env KOYEB_CLI_PAT_TOKEN=@KOYEB_CLI_PAT_TOKEN \
            --env NODE_ENV='production' \
            --env SEGMENT_WRITE_KEY=@SEGMENT_WRITE_KEY \
            --env DEFAULT_APPDOTBUILDER_ORG_INSTALLATION_ID=@DEFAULT_APPDOTBUILDER_ORG_INSTALLATION_ID
